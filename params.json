{
  "name": "Javascript",
  "tagline": "Javscript Introduction and workshop",
  "body": "What is Javascript ? \r\n> client side scripting\r\n> wiki : An object-oriented computer programming language commonly used to create interactive effects within web browsers\r\n\r\n\r\n- Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM).\r\n- Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. \r\n  1. Communicate with a database\r\n  2. Provide continuity of information from one invocation to another of the application\r\n  3. Perform file manipulations on a server\r\n\r\nEverything in javascript is an object. Aww!!!\r\n> Act like objects. ( Explained in Literals section )\r\n\r\n`Arrays, functions`, even `numbers`! Because of this, you can do some really interesting things, such as modifying the prototypes of Objects, Arrays, etc.\r\n\r\n- Written in `c++` ( v8 chrome `c++`, Spidermonkey firefox `c++` and Rhino `java` )\r\n- primitive type ( `Boolean , Number , null , undefined and String` ( ex : `var letter = 'abc';` ) )\r\n\r\n\r\n- non-primitive ( Object, Regex and Array )\r\n>Compared by unique identity.\r\n\r\n### Topics which are covered\r\n- Primitive `vs` non-primitive\r\n- Falsy `vs` Truthy\r\n- Function and Hoisting\r\n- Scope\r\n- IIFE\r\n- Objects\r\n- Literals `vs` Wrappers and Immutable `vs` non-Immutable ( primitives section, find in primitives chapter in ebook )\r\n- Inheritance\r\n- this\r\n- Closure\r\n- Synchronous `vs` Asynchronous\r\n- Event Loop\r\n\r\n\r\n### Topics which are not covered\r\n- Object.defineProperties or propertyDescriptor and accessors.\r\n- unicode\r\n- Date\r\n- Math\r\n- Regular expressions\r\n- module loaders\r\n\r\n\r\n### 1. Primitive `vs` non-primitive\r\nPrimitive : Compared by value.\r\n- Booleans: true, false\r\n- Numbers: 1736, 1.351\r\n- Strings: 'abc', \"abc\"\r\n- Two “nonvalues”: undefined, null\r\n\r\n```javascript\r\n> 3 === 3\r\ntrue\r\n> 'abc' === 'abc'\r\ntrue\r\n```\r\n\r\nnon-primitive :\r\nAll nonprimitive values are objects. The most common kinds of objects are:\r\n```javascript\r\nObjects (Literals):\r\n{\r\n    firstName: 'Jane',\r\n    lastName: 'Doe'\r\n}\r\n\r\nArrays (Literals): \r\n['item1','item2'];\r\n\r\n```\r\n\r\ncompared by reference.\r\nIdentities are compared; every value has its own identity:\r\n```javascript\r\n> ({} === {})  // two different empty objects\r\nfalse\r\n\r\n> var obj1 = {};\r\n> var obj2 = obj1;\r\n> obj1 === obj2\r\ntrue\r\n```\r\n\r\n### non-values\r\nTo represent missing information in language.\r\n```\r\nundefined:\r\nno value, non existence or Uninitialized or missing values are \r\nreprsented as undefined\r\n\r\nnull:\r\nnull means “no object.” It is used as a nonvalue whenever an object is expected (parameters, last in a chain of objects, etc.).( no properties for both not event toString())\r\n```\r\n#### 2. Falsy `vs` Truthy :\r\nWhenever JavaScript expects a boolean value (e.g., for the condition of an if statement)\r\nFalsy values in language, equality or comparision check not needed\r\n\r\n- undefined, null\r\n- Boolean: false\r\n- Number: 0, NaN\r\n- String: ''\r\n\r\n```javascript\r\nvar falsyArr = [0, undefined, null, '', NaN];\r\n\r\nfalsyArr.forEach(function(element, index) {\r\n    if (element)\r\n        console.log('Truthy value : ', element);\r\n    else\r\n        console.log('Falsy value : ', element);\r\n});\r\n```\r\n\r\n- Truthy values ( Note : Object and empty array are considered to be true )\r\n\r\n```\r\nvar truthyArr = [1, -1, true, 'string', [],{},function(){},RegExp];\r\n\r\ntruthyArr.forEach(function(element, index) {\r\n    if (element)\r\n        console.log('Truthy value : ', element);\r\n    else\r\n        console.log('Falsy value : ', element);\r\n});\r\n```\r\n### Functions\r\n\r\nFunctions are values that can be called. One way of defining a function is called a function declaration. For example, the following code defines the function id that has a single parameter, x:\r\n\r\n```function id(x) {\r\n    return x;\r\n}\r\n\r\n```\r\nThe return statement returns a value from id. You can call a function by mentioning its name, followed by arguments in parentheses:\r\n```javascript\r\n> id('hello')\r\n'hello'\r\n```\r\nIf you don’t return anything from a function, undefined is returned (implicitly):\r\n```javascript\r\n> function f() { }\r\n> f()\r\nundefined\r\n\r\n```\r\n\r\nThe Three Roles of Functions in JavaScript\r\nOnce you have defined a function as just shown, it can play several roles:\r\nNonmethod function (“normal function”)\r\nYou can call a function directly. Then it works as a normal function. Here’s an example invocation:\r\n```javascript\r\nid('hello')\r\n```\r\n\r\nConstructor\r\nYou can invoke a function via the new operator. Then it becomes a constructor, a factory for objects. Here’s an example invocation:\r\n```javascript\r\nnew Date() // returns an object.\r\n```\r\n\r\nMethod\r\nYou can store a function in a property of an object, which turns it into a method that you can invoke via that object. Here’s an example invocation:\r\n```javascript\r\nobj.method()\r\n```\r\n\r\n“Parameter” `Versus` “Argument”\r\nThe terms parameter and argument are often used interchangeably, Parameters are used to define a function. They are also called formal parameters and formal arguments. In the following example, param1 and param2 are parameters:\r\n```javascript\r\nfunction foo(param1, param2) {\r\n    ...\r\n}\r\n```\r\nArguments are used to invoke a function. They are also called actual parameters and actual arguments. In the following example, 3 and 7 are arguments:\r\n```javascript\r\nfoo(3, 7);\r\n```\r\n\r\nDefining Functions\r\nThis section describes three ways to create a function:\r\n```javascript\r\nVia a function expression\r\nVia a function declaration\r\nVia the constructor Function()\r\n```\r\n\r\nAll functions are objects, instances of `Function`:\r\n```javascript\r\nfunction id(x) {\r\n    return x;\r\n}\r\nconsole.log(id instanceof Function); // true\r\n```\r\nTherefore, functions get their methods from Function.prototype.\r\n\r\nFunction Expressions\r\nA function expression produces a `value—a` function object. For example:\r\n```javascript\r\nvar add = function (x, y) { return x + y };\r\nconsole.log(add(2, 3)); // 5\r\n```\r\n\r\nThe preceding code assigned the result of a function expression to the variable add and called it via that variable. The value produced by a function expression can be assigned to a variable (as shown in the last example), passed as an argument to another function, and more. Because normal function expressions don’t have a name, they are also called `anonymous function expressions`.\r\n\r\nNamed function expressions\r\n\r\nYou can give a function expression a name. Named function expressions allow a function expression to refer to itself, which is useful for self-recursion:\r\n```javascript\r\nvar fac = function me(n) {\r\n    if (n > 0) {\r\n        return n * me(n-1);\r\n    } else {\r\n        return 1;\r\n    }\r\n};\r\nconsole.log(fac(3)); // 6\r\n\r\nvar fac = function(n) {\r\n    if (n > 0) {\r\n        return n * fac(n-1);\r\n    } else {\r\n        return 1;\r\n    }\r\n};\r\nconsole.log(fac(3)); // 6\r\n\r\n```\r\nNOTE\r\nThe name of a named function expression is only accessible inside the function expression:\r\n```javascript\r\nvar repeat = function me(n, str) {\r\n    return n > 0 ? str + me(n-1, str) : '';\r\n};\r\nconsole.log(repeat(3, 'Yeah')); // YeahYeahYeah\r\nconsole.log(me); // ReferenceError: me is not defined\r\n```\r\nFunction Declarations\r\nThe following is a function declaration:\r\n```javascript\r\nfunction add(x, y) {\r\n    return x + y;\r\n}\r\n\r\n```\r\nA function declaration declares a new variable, creates a function object, and assigns it to the variable.\r\n\r\nThe Function Constructor\r\nThe constructor Function() evaluates JavaScript code stored in strings. For example, the following code is equivalent to the previous example:\r\n```\r\nvar add = new Function('x', 'y', 'return x + y');\r\n```\r\n####Hoisting\r\nHoisting means “moving to the beginning of a scope.” Function declarations are hoisted completely, variable declarations only partially.\r\nFunction declarations are completely hoisted. That allows you to call a function before it has been declared:\r\n```javascript\r\nfoo();\r\nfunction foo() {  // this function is hoisted\r\n    ...\r\n}\r\n```\r\nThe reason the preceding code works is that JavaScript engines move the declaration of foo to the beginning of the scope. They execute the code as if it looked like this:\r\n```javascript\r\nfunction foo() {\r\n    ...\r\n}\r\nfoo();\r\n\r\nfunction foo() {\r\n    bar();  // OK, bar is hoisted\r\n    function bar() {\r\n        ...\r\n    }\r\n}\r\n\r\nfunction foo() {\r\n    bar();  // Not OK, bar is still undefined\r\n    var bar = function () {\r\n        // ...\r\n    };\r\n}\r\n\r\n```\r\nvar declarations are hoisted, too, but only the declarations, not assignments made with them. Therefore, using a var declaration and a function expression similarly to the previous example results in an error:\r\n```javascript\r\nfoo();  // TypeError: undefined is not a function\r\nvar foo = function () {\r\n    ...\r\n};\r\n```\r\nOnly the variable declaration is hoisted. The engine executes the preceding code as:\r\n```javascript\r\nvar foo;\r\nfoo();  // TypeError: undefined is not a function\r\nfoo = function () {\r\n    ...\r\n};\r\n```\r\n\r\nThe Name of a Function\r\nMost JavaScript engines support the nonstandard property name for function objects. Function declarations have it:\r\n```javascript\r\n> function f1() {}\r\n> f1.name\r\n'f1'\r\n```\r\nThe name of anonymous function expressions is the empty string:\r\n```javascript\r\n> var f2 = function () {};\r\n> f2.name\r\n''\r\n```\r\nNamed function expressions, however, do have a name:\r\n```javascript\r\n> var f3 = function myName() {};\r\n> f3.name\r\n'myName'\r\n```\r\nThe name of a function is useful for debugging. Some people always give their function expressions names for that reason.\r\nWhich Is Better: A Function Declaration or a Function Expression?\r\nShould you prefer a function declaration like the following?\r\n```javascript\r\nfunction id(x) {\r\n    return x;\r\n}\r\n```\r\nOr the equivalent combination of a var declaration plus a function expression?\r\n```javascript\r\nvar id = function (x) {\r\n    return x;\r\n};\r\n```\r\nThey are basically the same, but function declarations have two advantages over function expressions:\r\nThey are hoisted (see Hoisting), so you can call them before they appear in the source code.\r\nThey have a name (see The Name of a Function). However, JavaScript engines are getting better at inferring the names of anonymous function expressions.\r\n\r\n\r\nMore Control over Function Calls: call(), apply(), and bind()\r\ncall(), apply(), and bind() are methods that all functions have (remember that functions are objects and therefore have methods). They can supply a value for `this` when invoking a method and thus are mainly interesting in an object-oriented context (see Calling Functions While Setting this: call(), apply(), and bind()). `This` section explains two use cases for nonmethods.\r\n`func.apply(thisValue, argArray)`\r\nThis method uses the elements of argArray as arguments while calling the function func; that is, the following two expressions are equivalent:\r\n```javascript\r\nfunc(arg1, arg2, arg3)\r\nfunc.apply(null, [arg1, arg2, arg3])\r\n```\r\nthisValue is the value that this has while executing func. It is not needed in a non-object-oriented setting and is thus null here.\r\napply() is useful whenever a function accepts multiple arguments in an array-like manner, but not an array.\r\nThanks to apply(), we can use Math.max() (see Other Functions) to determine the maximum element of an array:\r\n```javascript\r\n> Math.max(17, 33, 2)\r\n33\r\n> Math.max.apply(null, [17, 33, 2])\r\n33\r\n````\r\nfunc.bind(thisValue, arg1, ..., argN)\r\nThis performs partial function application—a new function is created that calls func with this set to thisValue and the following arguments: first arg1 until argN, and then the actual arguments of the new function. thisValue is not needed in the following non-object-oriented setting, which is why it is null.\r\nHere, we use bind() to create a new function plus1() that is like add(), but only requires the parameter y, because x is always 1:\r\n```javascript\r\nfunction add(x, y) {\r\n    return x + y;\r\n}\r\nvar plus1 = add.bind(null, 1);\r\nconsole.log(plus1(5));  // 6\r\n```\r\nIn other words, we have created a new function that is equivalent to the following code:\r\n```javascript\r\nfunction plus1(y) {\r\n    return add(1, y);\r\n}\r\n```\r\n\r\n### Scope\r\nDeclaring a Variable\r\nIn JavaScript, you declare a variable via a var statement before you use it:\r\n```javascript\r\nvar foo;\r\nfoo = 3; // OK, has been declared\r\nbar = 5; // not OK, an undeclared variable\r\n```\r\nYou can also combine a declaration with an assignment, to immediately initialize a variable:\r\n```javascript\r\nvar foo = 3;\r\n```\r\nThe value of an uninitialized variable is undefined:\r\n```javascript\r\n> var x;\r\n> x\r\n\r\nundefined\r\n```\r\n\r\nThe scope of a variable\r\nThe scope of a variable are the locations where it is `accessible`. For example:\r\n```javascript\r\nfunction foo() {\r\n    var x;\r\n}\r\n```javascript\r\nHere, the direct scope of x is the function foo().\r\n\r\nNested :\r\n\r\n```javascript\r\nfunction foo(arg) {\r\n    function bar() {\r\n        console.log('arg: '+arg);\r\n    }\r\n    bar();\r\n}\r\nconsole.log(foo('hello')); // arg: hello\r\n\r\n```\r\nShadowing :\r\n```javascript\r\nvar x = \"global\";\r\nfunction f() {\r\n    var x = \"local\";\r\n    console.log(x); // local\r\n}\r\nf();\r\nconsole.log(x); // global\r\n```\r\n\r\nVariables Are Function-Scoped\r\nMost mainstream languages are `block-scoped`: variables “live inside” the innermost surrounding code block. Here is an example from Java:\r\n```java\r\npublic static void main(String[] args) {\r\n    { // block starts\r\n        int foo = 4;\r\n    } // block ends\r\n    System.out.println(foo); // Error: cannot find symbol\r\n}\r\n```\r\n\r\nIn contrast, JavaScript’s variables are `function-scoped`: only functions introduce new scopes; blocks are ignored when it comes to scoping. For example:\r\n```javascript\r\nfunction main() {\r\n    { // block starts\r\n        var foo = 4;\r\n    } // block ends\r\n    console.log(foo); // 4\r\n}\r\n( Note : ES6 changed them `let` & 'const')\r\n```\r\n\r\nVariable Hoisting:\r\n```javascript\r\n\r\nfunction f() {\r\n    console.log(bar);  // undefined\r\n    var bar = 'abc';\r\n    console.log(bar);  // abc\r\n}\r\n\r\nfunction f() {\r\n    var bar;\r\n    console.log(bar);  // undefined\r\n    bar = 'abc';\r\n    console.log(bar);  // abc\r\n}\r\n\r\n\r\n> var x = 123;\r\n> var x;\r\n> x\r\n123\r\n\r\n```\r\n\r\n###IIFE Immediately invoked function expression (IIFE, pronounced “iffy”)\r\n- It is immediately invoked\r\n- It must be an expression\r\n- The trailing semicolon is required\r\n```javascript\r\nfunction f() {\r\n    if (condition) {\r\n        var tmp = ...;\r\n        ...\r\n    }\r\n    // tmp still exists here\r\n    // => not what we want\r\n}\r\n\r\nfunction f() {\r\n    if (condition) {\r\n        (function () {  // open block\r\n            var tmp = ...;\r\n            ...\r\n        }());  // close block\r\n    }\r\n}\r\n\r\n(function () { // open IIFE\r\n    // inside IIFE\r\n}()); // close IIFE\r\n\r\n```\r\n\r\nIIFE with params : \r\n```javascript\r\nvar x = 23;\r\n(function (twice) {\r\n    console.log(twice);\r\n}(x * 2));\r\n```\r\nBest Practice: Avoid Creating Global Variables\r\nGlobal variables have two disadvantages. First, pieces of software that rely on global variables are subject to side effects; they are less robust, behave less predictably, and are less reusable.\r\nSecond, all of the JavaScript on a web page shares the same global variables: \r\n\r\n> your code, built-ins, analytics code, social media buttons, and so on.\r\n\r\nThat means that name clashes can become a problem. That is why it is best to hide as many variables from the global scope as possible. For example, don’t do this:\r\n```javascript\r\n<!-- Don’t do this -->\r\n<script>\r\n    // Global scope\r\n    var tmp = generateData();\r\n    processData(tmp);\r\n    persistData(tmp);\r\n</script>\r\n```\r\nThe variable tmp becomes global, because its declaration is executed in global scope. But it is only used locally. Hence, we can use an IIFE (see Introducing a New Scope via an IIFE) to hide it inside a nested scope:\r\n```javascript\r\n<script>\r\n    (function () {  // open IIFE\r\n        // Local scope\r\n        var tmp = generateData();\r\n        processData(tmp);\r\n        persistData(tmp);\r\n    }());  // close IIFE\r\n</script>\r\n```\r\n### Objects\r\nAll nonprimitive values are objects. The most common kinds of objects are:\r\nPlain objects, which can be created by object literals (see Single Objects):\r\n```javascript\r\n{\r\n    firstName: 'Jane',\r\n    lastName: 'Doe'\r\n}\r\n```\r\nThe preceding object has two properties: the value of property firstName is 'Jane' and the value of property lastName is 'Doe'.\r\n\r\nArrays, which can be created by array literals (see Arrays):\r\n```javascript\r\n[ 'apple', 'banana', 'cherry' ]\r\n```\r\nThe preceding array has three elements that can be accessed via numeric indices. For example, the index of 'apple' is 0.\r\nRegular expressions, which can be created by regular expression literals (see Regular Expressions):\r\n```javascript\r\n/^a+b+$/\r\n```\r\n\r\nSingle Object , each property is a (key, value) pair\r\n```javascript\r\nvar jane = {\r\n    name: 'Jane',\r\n\r\n    describe: function () {\r\n        return 'Person named '+this.name;\r\n    }\r\n};\r\n\r\nDot Operator (.): Accessing Properties via Fixed Keys\r\n\r\n```javascript\r\n\tjane.name // 'Jane'\r\n\tjane.describe(); // 'Person named Jane';\r\n\r\n```\r\n\r\nArbitrary Property Keys : \r\n\r\n```javascript\r\n> var obj = { 'not an identifier': 123 };\r\n> obj['not an identifier']\r\n123\r\n> obj['not an identifier'] = 456;\r\n```\r\n\r\nExtracting Methods : \r\nIf you extract a method, it loses its connection with the object.\r\n```javascript\r\n\r\nvar jane = {\r\n    name: 'Jane',\r\n\r\n    describe: function () {\r\n        return 'Person named '+this.name;\r\n    }\r\n};\r\n\r\nvar func = jane.describe;\r\nfunc()\r\nTypeError: Cannot read property 'name' of undefined\r\n\r\nsol :\r\n\r\nvar func2 = jane.describe.bind(jane);\r\nfunc2()\r\n'Person named Jane'\r\n\r\n```\r\n\r\nGetting properties\r\n\r\nThe dot operator lets you “get” a property (read its value). Here are some examples:\r\n```javascript\r\n> jane.name  // get property `name`\r\n'Jane'\r\n> jane.describe  // get property `describe`\r\n[Function]\r\n```\r\nGetting a property that doesn’t exist returns undefined:\r\n```javascript\r\n> jane.unknownProperty\r\nundefined\r\n\r\n```\r\n\r\nCalling methods\r\n\r\nThe dot operator is also used to call methods:\r\n```javascript\r\n> jane.describe()  // call method `describe`\r\n'Person named Jane'\r\n```\r\n\r\nSetting properties\r\n\r\nYou can use the assignment operator (=) to set the value of a property referred to via the dot notation. For example:\r\n```javascript\r\n> jane.name = 'John';  // set property `name`\r\n> jane.describe()\r\n'Person named John'\r\n```\r\nIf a property doesn’t exist yet, setting it automatically creates it. If a property already exists, setting it changes its value.\r\n\r\nDeleting properties\r\n\r\nThe delete operator lets you completely remove a property (the whole key-value pair) from an object. For example:\r\n```javascript\r\n> var obj = { hello: 'world' };\r\n> delete obj.hello\r\ntrue\r\n> obj.hello\r\nundefined\r\n\r\n```\r\n\r\nBracket Operator ([]): Accessing Properties via Computed Keys :\r\n```javascript\r\n\r\n> var obj = { someProperty: 'abc' };\r\n\r\n> obj['some' + 'Property']\r\n'abc'\r\n\r\n> var propKey = 'someProperty';\r\n> obj[propKey]\r\n'abc'\r\n\r\nGetting props:\r\n> var obj = { 'not an identifier': 123 };\r\n> obj['not an identifier']\r\n123\r\n\r\ncalling methods :\r\n> var obj = { myMethod: function () { return true } };\r\n> obj['myMethod']()\r\ntrue\r\n\r\nsetting props :\r\n> var obj = {};\r\n> obj['anotherProperty'] = 'def';\r\n> obj.anotherProperty\r\n'def'\r\n\r\ndeleting props:\r\n> var obj = { 'not an identifier': 1, prop: 2 };\r\n> Object.keys(obj)\r\n[ 'not an identifier', 'prop' ]\r\n> delete obj['not an identifier']\r\ntrue\r\n> Object.keys(obj)\r\n[ 'prop' ]\r\n\r\n\r\n```\r\n\r\n\r\nObjects via Constructor \r\n\r\n```javascript\r\nfunction Person(name){\r\n\tthis.name = name;\r\n}\r\n\r\nPerson.prototype.describe = function(){\r\n\treturn 'Person named '+this.name;\r\n}\r\n\r\nvar jane = new Person('Jane');\r\n```\r\n### Literals vs Wrapper functions.\r\n\r\n- Primitives are immutable, compared by value ( undefined, null, boolean, string and number )\r\n- non-primitives are mutable ( properties can be added or deleted ), compared by identity rather than value.\r\n\r\nIn JavaScript there are 5 primitive types: undefined, null, boolean, string and number. Everything else is an object. The primitive types boolean, string and number can be wrapped by their object counterparts. These objects are instances of the Boolean, String and Number constructors respectively.\r\n```javascript\r\ntypeof true; //\"boolean\"\r\ntypeof Boolean(true); //\"boolean\"\r\ntypeof new Boolean(true); //\"object\"\r\ntypeof (new Boolean(true)).valueOf(); //\"boolean\"\r\n \r\ntypeof \"abc\"; //\"string\"\r\ntypeof String(\"abc\"); //\"string\"\r\ntypeof new String(\"abc\"); //\"object\"\r\ntypeof (new String(\"abc\")).valueOf(); //\"string\"\r\n \r\ntypeof 123; //\"number\"\r\ntypeof Number(123); //\"number\"\r\ntypeof new Number(123); //\"object\"\r\ntypeof (new Number(123)).valueOf(); //\"number\"\r\n\r\n```\r\nIf primitives have no properties, why does \"abc\".length return a value?\r\n\r\n```javascript\r\nvar a = \"abc\";\r\na.length\r\n// actual happening\r\n(new String('abc')).length\r\n// intermediate object gets destructed\r\n\r\n\r\nvar primitive = \"september\";\r\nprimitive.vowels = 3;\r\n//new object created to set property \r\n(new String(\"september\")).vowels = 3;\r\n \r\nprimitive.vowels;\r\n//another new object created to retrieve property \r\n(new String(\"september\")).vowels; //undefined\r\n\r\n\r\nReally object is created, is there way to verify in a scientific investigation,\r\n> Yes there is, !!!!!!!!!\r\n\r\nString.prototype.returnMe= function() {\r\n    return this;\r\n}\r\n \r\nvar a = \"abc\";\r\nvar b = a.returnMe();  \r\n \r\na; //\"abc\" \r\ntypeof a; //\"string\" (still a primitive)\r\nb; //\"abc\"\r\ntypeof b; //\"object\"\r\n\r\n\r\n\r\na; //\"abc\" \r\ntypeof a; //\"string\" (still a primitive)\r\nb; //\"abc\"\r\ntypeof b; //\"object\"\r\n\r\n```\r\n### Inheritance\r\n\r\nThe Prototype Relationship Between Objects\r\n\r\nThe prototype relationship between two objects is about inheritance: every object can have another object as its prototype\r\n```javascript\r\n> __proto__ == [[Prototype]] some javscript engines support __proto__ special key for getting and setting prototype.\r\n```\r\n![prototype chain](http://speakingjs.com/es5/images/spjs_2101.png)\r\n\r\nex :\r\n```javascript\r\nvar proto = {\r\n    describe: function () {\r\n        return 'name: '+this.name;\r\n    }\r\n};\r\nvar obj = {\r\n    __proto__: proto,\r\n    name: 'obj'\r\n};\r\n\r\nvar obj2 = {\r\n    name: 'obj2'\r\n};\r\n\r\nobj.__proto__ === proto \r\nobj2.__proto__ // root Object\r\nproto.__proto__ // root Object\r\n\r\n```\r\nOverriding\r\n```javascript\r\nobj.describe = function () { return 'overridden' };\r\nobj.describe()\r\n\r\n```\r\nPrototypes are great for sharing data between objects: several objects get the same prototype, which holds all shared properties.\r\n```javascript\r\nvar jane = {\r\n    name: 'Jane',\r\n    describe: function () {\r\n        return 'Person named '+this.name;\r\n    }\r\n};\r\nvar tarzan = {\r\n    name: 'Tarzan',\r\n    describe: function () {\r\n        return 'Person named '+this.name;\r\n    }\r\n};\r\n```\r\n![prototype chain](http://speakingjs.com/es5/images/spjs_2102.png)\r\n```javascript\r\n\r\nvar PersonProto = {\r\n    describe: function () {\r\n        return 'Person named '+this.name;\r\n    }\r\n};\r\nvar jane = {\r\n    __proto__: PersonProto,\r\n    name: 'Jane'\r\n};\r\nvar tarzan = {\r\n    __proto__: PersonProto,\r\n    name: 'Tarzan'\r\n};\r\n\r\n\r\njane.describe()\r\ntarzan.describe()\r\n```\r\n\r\nObject.create \r\n```javascript\r\n>syntax\r\nObject.create(proto, propDescObj?)\r\n\r\nvar PersonProto = {\r\n    describe: function () {\r\n        return 'Person named '+this.name;\r\n    }\r\n};\r\nvar jane = Object.create(PersonProto, {\r\n    name: { value: 'Jane', writable: true }\r\n});\r\n\r\nor manually you can create them.\r\n\r\nvar jane = Object.create(PersonProto);\r\njane.name = 'Jane';\r\n```\r\nChecking Whether a Property Exists\r\n\r\n`in` operator\r\n\r\n`propKey in obj`\r\n\r\nor \r\n\r\n`<target-Object>.hasOwnProperty(propKey)`\r\n\r\nor \r\n\r\n`Object.hasOwnProperty(propKey)`\r\n\r\n\r\nFunction prototyping.\r\n```javascript\r\nfunction Person(name) {\r\n    this.name = name;\r\n}\r\nPerson.prototype.describe = function() {\r\n    return \"Person \" + this.name;\r\n};\r\n\r\nfunction Worker(name, title) {\r\n    Person.call(this, name);\r\n    this.title = title;\r\n}\r\n\r\nWorker.prototype.__proto__ = Person.prototype;\r\nWorker.prototype.describe = function() {\r\n    return this.title + \" \" + this.name;\r\n};\r\n\r\nvar user = new Worker('Kamesh','Devloper')\r\nuser instanceof Worker\r\nuser instanceof Person\r\n```\r\n\r\nES5 to help. ( Object.create setting proper prototype internal without manually\r\naltering the prototype chain )\r\n\r\n```javascript\r\nfunction Person(name) {\r\n    this.name = name;\r\n}\r\nPerson.prototype.describe = function() {\r\n    return \"Person \" + this.name;\r\n};\r\n\r\nfunction Worker(name, title) {\r\n    Person.call(this, name);\r\n    this.title = title;\r\n}\r\n\r\nWorker.prototype = Object.create(Person.prototype);\r\nWorker.prototype.describe = function() {\r\n    return this.title + \" \" + this.name;\r\n};\r\n\r\nvar user = new Worker('Kamesh','Devloper')\r\nuser instanceof Worker\r\nuser instanceof Person\r\n```\r\nHow to call super function ? is there super available in javascript\r\nNo but we can mimic it.\r\n```javascript\r\nuser.describe(); // Developer Kamesh.\r\n\r\nWorker.prototype.describe = function() {\r\n    return this.__proto__ // worker prototype\r\n    \t\t\t.__proto__ // person prototype\r\n    \t\t\t.describe.apply(this,arguments); // person describe fn.\r\n};\r\n\r\nor \r\n\r\nWorker.prototype.describe = function() {\r\n    return Person.describe.apply(this,arguments); // person describe fn.\r\n};\r\n\r\n```\r\n\r\nWhat does “this” actually mean and how is it decided?\r\n\r\n For example, if I have a class Boat(), which has a method moveBoat(), when refering to “this” inside of the moveBoat() method, we are actually accessing the newly created object of Boat().\r\n```java\r\nclass Boat{\r\n\tboolean isReady(){\r\n\t\treturn true;\r\n\t}\r\n\tpublic boolean moveBoat(){\r\n\t\treturn this.isReady(); // this refers to newly created object.\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tBoat miniTitanic = new Boat();\r\n\t\tSystem.out.println(miniTitanic.moveBoat());\r\n\t}\r\n}\r\n```\r\nhowever it is not the only rule and “this” can often refer to a different `object` from a different `execution context`\r\n\r\n> function caller determines `this` context.\r\n\r\n```javascript\r\nfunction describe(){\r\n\tconsole.log('context ',this);\r\n\tconsole.log('User was identified as '+this.name);\r\n}\r\n\r\nvar jane = {\r\n    'name': 'Jane',\r\n    'describe': describe // method\r\n};\r\nvar tarzan = {\r\n    name: 'Tarzan',\r\n    describe: describe // method;\r\n};\r\n\r\njane.describe();\r\ntarzan.describe();\r\n```\r\nor \r\n\r\n> Remember call,apply and bind. which can invoke the function\r\nwith provided context `this` and arguments.\r\n\r\n```javascript\r\nfunction describe(){\r\n\tconsole.log('context ',this);\r\n\tconsole.log('User was identified as '+this.name);\r\n}\r\n\r\nvar smith = {\r\n\tname : 'smith'\r\n}\r\n\r\nvar jane = {\r\n\tname : 'jane'\r\n}\r\n\r\ndescribe.call(smith)\r\ndescribe.apply(jane)\r\n\r\n```\r\n### Synchronous Vs Asynchronous\r\n- Blocking vs non-blocking\r\n- ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}